{
  "permissions": {
    "allow": [
      "Bash(gh:*)",
      "Bash(python:*)",
      "Bash(make:*)",
      "Bash(uv run:*)",
      "Bash(uv sync:*)",
      "Bash(ls:*)",
      "Bash(git add:*)",
      "Bash(git checkout:*)",
      "Bash(git push:*)",
      "WebFetch(domain:github.com)",
      "Bash(mkdir:*)",
      "Bash(git pull:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(git restore:*)",
      "Bash(curl:*)",
      "Bash(grep:*)",
      "Bash(pkill:*)",
      "Bash(find:*)",
      "Bash(git branch:*)",
      "Bash(timeout 10 make run)",
      "Bash(true)",
      "Bash(SOLVER_TIMEOUT_SECONDS=10 SOLVER_LOG_LEVEL=DEBUG uv run python -c \"import sys; sys.path.insert(0, 'src'); from natural_shift_planner.api.solver import SOLVER_TIMEOUT_SECONDS, SOLVER_LOG_LEVEL; print(f'Timeout: {SOLVER_TIMEOUT_SECONDS}s, Log Level: {SOLVER_LOG_LEVEL}')\")",
      "Bash(chmod:*)",
      "Bash(git remote set-url:*)",
      "Bash(mv:*)",
      "Bash(./create_issues.sh:*)",
      "Bash(/opt/homebrew/bin/gh issue create --title \"[Phase 1-1] Optimize Docker build with multi-stage configuration\" --body \"## Goal\nOptimize the Docker build process for production deployment with multi-stage build to reduce image size and improve security.\n\n## Tasks\n- [ ] Create optimized Dockerfile with multi-stage build\n- [ ] Separate build dependencies from runtime dependencies\n- [ ] Add health check configuration\n- [ ] Minimize final image size (target: <200MB)\n- [ ] Add .dockerignore file\n- [ ] Test build process and runtime\n\n## Acceptance Criteria\n- Dockerfile uses multi-stage build\n- Final image size is under 200MB\n- Application starts successfully\n- Health check endpoint responds\n- No development dependencies in production image\n\n## Estimated Time\n3-5 days\" --label \"infrastructure\" --label \"enhancement\")",
      "Bash(/usr/bin/python3:*)",
      "Bash(docker build:*)",
      "Bash(uv lock:*)",
      "Bash(docker run:*)",
      "Bash(docker stop:*)",
      "Bash(rg:*)",
      "Bash(cp:*)",
      "Bash(docker-compose config:*)",
      "Bash(docker-compose:*)",
      "Bash(uv build)",
      "Bash(pulumi:*)",
      "Bash(touch:*)",
      "Bash(git merge:*)",
      "Bash(sed:*)",
      "Bash(git cherry-pick:*)",
      "Bash(PYTHONPATH=src uv run mypy -p natural_shift_planner)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_continuous_planning.py -v)",
      "Bash(PYTHONPATH=src uv run pytest tests/ -v --tb=short)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py -v)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py::test_add_employee_problem_fact_change_creation -v)",
      "Bash(PYTHONPATH=src uv run mypy -p natural_shift_planner --show-error-codes)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py::test_convert_to_emergency_mode -v)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py::test_add_employee_to_completed_job -v)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py::test_add_employee_to_completed_job_logic_only -v)",
      "Bash(PYTHONPATH=src uv run pytest tests/test_emergency_staff.py::test_add_employee_to_invalid_job -v)",
      "Bash(git tag:*)",
      "Bash(git config:*)",
      "Bash(cat:*)"
    ],
    "deny": []
  }
}