# ==== Build Stage ====
FROM python:3.11-slim AS builder

# Build arguments
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Install uv for fast dependency management
COPY --from=ghcr.io/astral-sh/uv:latest /uv /bin/uv
RUN chmod +x /bin/uv

# Set working directory
WORKDIR /app

# Copy dependency files first for better layer caching
COPY pyproject.toml uv.lock ./

# Install dependencies (production only, no dev dependencies)
RUN /bin/uv sync --frozen --no-dev --no-install-project

# ==== Runtime Stage ====
FROM python:3.11-slim AS runtime

# Build arguments
ARG TARGETPLATFORM

# Install minimal system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Set working directory
WORKDIR /app

# Copy virtual environment from builder stage
COPY --from=builder /app/.venv /app/.venv

# Add virtual environment to PATH
ENV PATH="/app/.venv/bin:$PATH"

# Copy application source code
COPY src/ ./src/
COPY scripts/ ./scripts/

# Create non-root user for security
RUN useradd --create-home --shell /bin/bash --uid 1000 app \
    && chown -R app:app /app
USER app

# Set environment variables for MCP server
ENV PYTHONPATH=/app/src
ENV SHIFT_AGENT_API_URL=http://host.docker.internal:8081
ENV LOG_LEVEL=INFO
ENV MCP_LOG_LEVEL=INFO

# SSE transport configuration (deprecated)
ENV MCP_TRANSPORT=sse
ENV MCP_SSE_HOST=0.0.0.0
ENV MCP_SSE_PORT=8084

# Expose SSE port
EXPOSE 8084

# Health check for SSE MCP server
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8084/sse/ || exit 1

# Run MCP server in SSE mode (deprecated)
CMD ["python", "scripts/run_mcp_sse.py"]
