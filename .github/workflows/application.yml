name: Application Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - 'infrastructure/**'
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'infrastructure/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/shift-scheduler

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run tests
        run: |
          PYTHONPATH=src uv run pytest tests/ -v

      - name: Run linting
        run: |
          uv run ruff check src/
          PYTHONPATH=src uv run mypy -p natural_shift_planner

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        env:
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.5"
          terraform_wrapper: false

      - name: Get Terraform Outputs
        id: terraform
        run: |
          cd infrastructure
          terraform init
          
          # Get infrastructure outputs
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          CONTAINER_APP_ENV=$(terraform output -raw container_apps_environment_name)
          REGISTRY_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          STORAGE_ACCOUNT=$(terraform output -raw storage_account_name)
          STORAGE_CONTAINER=$(terraform output -raw storage_job_data_container)
          
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "container_app_env=$CONTAINER_APP_ENV" >> $GITHUB_OUTPUT
          echo "registry_login_server=$REGISTRY_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "storage_account_name=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "storage_job_data_container=$STORAGE_CONTAINER" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Container Apps (Dev)
        run: |
          RESOURCE_GROUP="${{ steps.terraform.outputs.resource_group }}"
          CONTAINER_APP_ENV="${{ steps.terraform.outputs.container_app_env }}"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          
          echo "🚀 Deploying to development environment..."
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Container App Environment: $CONTAINER_APP_ENV"
          echo "Image: $IMAGE_TAG"
          
          # Check if Container App exists, create or update
          if az containerapp show --name ca-nss-api-dev-001 --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "🔄 Updating existing Container App..."
            az containerapp update \
              --name ca-nss-api-dev-001 \
              --resource-group $RESOURCE_GROUP \
              --image $IMAGE_TAG \
              --revision-suffix $(date +%s)
          else
            echo "🆕 Creating new Container App..."
            az containerapp create \
              --name ca-nss-api-dev-001 \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $IMAGE_TAG \
              --target-port 8081 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 1.0 \
              --memory 2.0Gi \
              --env-vars \
                SOLVER_TIMEOUT_SECONDS=300 \
                SOLVER_LOG_LEVEL=INFO \
                JOB_STORAGE_TYPE=azure \
                AZURE_STORAGE_ACCOUNT_NAME=${{ steps.terraform.outputs.storage_account_name }} \
                AZURE_STORAGE_CONTAINER_NAME=${{ steps.terraform.outputs.storage_job_data_container }}
          fi
          
          echo "✅ Deployment completed successfully!"
          
          # Get the application URL
          FQDN=$(az containerapp show --name ca-nss-api-dev-001 --resource-group $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
          echo "🌐 Application URL: https://$FQDN"
          echo "📋 API Documentation: https://$FQDN/docs"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.ARM_CLIENT_ID }}
          tenant-id: ${{ secrets.ARM_TENANT_ID }}
          subscription-id: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        env:
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.5"
          terraform_wrapper: false

      - name: Get Terraform Outputs (Prod)
        id: terraform
        run: |
          cd infrastructure
          terraform init
          terraform workspace select prod || terraform workspace new prod
          
          # Get infrastructure outputs for production
          RESOURCE_GROUP=$(terraform output -raw resource_group_name)
          CONTAINER_APP_ENV=$(terraform output -raw container_apps_environment_name)
          REGISTRY_LOGIN_SERVER=$(terraform output -raw container_registry_login_server)
          STORAGE_ACCOUNT=$(terraform output -raw storage_account_name)
          STORAGE_CONTAINER=$(terraform output -raw storage_job_data_container)
          
          echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
          echo "container_app_env=$CONTAINER_APP_ENV" >> $GITHUB_OUTPUT
          echo "registry_login_server=$REGISTRY_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "storage_account_name=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "storage_job_data_container=$STORAGE_CONTAINER" >> $GITHUB_OUTPUT
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Deploy to Container Apps (Prod)
        run: |
          RESOURCE_GROUP="${{ steps.terraform.outputs.resource_group }}"
          CONTAINER_APP_ENV="${{ steps.terraform.outputs.container_app_env }}"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          
          echo "🚀 Deploying to PRODUCTION environment..."
          echo "⚠️  This is a production deployment!"
          echo "Resource Group: $RESOURCE_GROUP"
          echo "Container App Environment: $CONTAINER_APP_ENV"
          echo "Image: $IMAGE_TAG"
          
          if az containerapp show --name ca-nss-api-prod-001 --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "🔄 Updating existing Container App..."
            az containerapp update \
              --name ca-nss-api-prod-001 \
              --resource-group $RESOURCE_GROUP \
              --image $IMAGE_TAG \
              --revision-suffix $(date +%s)
          else
            echo "🆕 Creating new Container App..."
            az containerapp create \
              --name ca-nss-api-prod-001 \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $IMAGE_TAG \
              --target-port 8081 \
              --ingress external \
              --min-replicas 2 \
              --max-replicas 10 \
              --cpu 2.0 \
              --memory 4.0Gi \
              --env-vars \
                SOLVER_TIMEOUT_SECONDS=600 \
                SOLVER_LOG_LEVEL=INFO \
                JOB_STORAGE_TYPE=azure \
                AZURE_STORAGE_ACCOUNT_NAME=${{ steps.terraform.outputs.storage_account_name }} \
                AZURE_STORAGE_CONTAINER_NAME=${{ steps.terraform.outputs.storage_job_data_container }}
          fi
          
          echo "✅ Production deployment completed successfully!"
          
          # Get the application URL
          FQDN=$(az containerapp show --name ca-nss-api-prod-001 --resource-group $RESOURCE_GROUP --query properties.configuration.ingress.fqdn -o tsv)
          echo "🌐 Production Application URL: https://$FQDN"
          echo "📋 Production API Documentation: https://$FQDN/docs"