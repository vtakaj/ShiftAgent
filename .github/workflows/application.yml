name: Application Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - 'infrastructure/**'
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'infrastructure/**'
      - '*.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/shift-scheduler

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run tests
        run: |
          uv run pytest tests/ -v

      - name: Run linting
        run: |
          uv run ruff check src/
          uv run mypy src/natural_shift_planner/

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Container Apps (Dev)
        run: |
          # Get Container Apps Environment from Pulumi outputs or use direct naming
          RESOURCE_GROUP="rg-org-shift-scheduler-core-dev-eastus-001"
          CONTAINER_APP_ENV="cae-org-shift-scheduler-core-dev-eastus-001"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          
          # Check if Container App exists, create or update
          if az containerapp show --name shift-scheduler-api --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "Updating existing Container App..."
            az containerapp update \
              --name shift-scheduler-api \
              --resource-group $RESOURCE_GROUP \
              --image $IMAGE_TAG
          else
            echo "Creating new Container App..."
            az containerapp create \
              --name shift-scheduler-api \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $IMAGE_TAG \
              --target-port 8081 \
              --ingress external \
              --min-replicas 1 \
              --max-replicas 3 \
              --cpu 1.0 \
              --memory 2.0Gi \
              --env-vars \
                SOLVER_TIMEOUT_SECONDS=300 \
                SOLVER_LOG_LEVEL=INFO
          fi

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Container Apps (Prod)
        run: |
          # Production deployment with higher resource limits
          RESOURCE_GROUP="rg-org-shift-scheduler-core-prod-eastus-001"
          CONTAINER_APP_ENV="cae-org-shift-scheduler-core-prod-eastus-001"
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          
          if az containerapp show --name shift-scheduler-api --resource-group $RESOURCE_GROUP >/dev/null 2>&1; then
            echo "Updating existing Container App..."
            az containerapp update \
              --name shift-scheduler-api \
              --resource-group $RESOURCE_GROUP \
              --image $IMAGE_TAG
          else
            echo "Creating new Container App..."
            az containerapp create \
              --name shift-scheduler-api \
              --resource-group $RESOURCE_GROUP \
              --environment $CONTAINER_APP_ENV \
              --image $IMAGE_TAG \
              --target-port 8081 \
              --ingress external \
              --min-replicas 2 \
              --max-replicas 10 \
              --cpu 2.0 \
              --memory 4.0Gi \
              --env-vars \
                SOLVER_TIMEOUT_SECONDS=600 \
                SOLVER_LOG_LEVEL=INFO