name: Infrastructure Deployment

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/**'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.5"

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}"
            }

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init (Dev Backend)
        id: init
        run: terraform init -backend-config=backends/dev.backend.hcl -reconfigure

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan (PR - Dev)
        id: plan-pr
        if: github.event_name == 'pull_request'
        run: |
          terraform plan \
            -var-file="environments/dev.tfvars" \
            -no-color \
            -detailed-exitcode \
            -out=tfplan
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        continue-on-error: true

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read the plan output if it exists
            let planOutput = '';
            try {
              const { exec } = require('child_process');
              exec('cd infrastructure && terraform show -no-color tfplan', (error, stdout, stderr) => {
                if (!error) {
                  planOutput = stdout;
                }
              });
            } catch (e) {
              planOutput = 'Could not read plan output';
            }

            const comment = `## Terraform Plan Results

            ### Format and Style üñå
            ${process.env.FMT_OUTCOME === 'failure' ? '‚ùå Failed' : '‚úÖ Passed'}

            ### Initialization ‚öôÔ∏è
            ${process.env.INIT_OUTCOME === 'failure' ? '‚ùå Failed' : '‚úÖ Passed'}

            ### Validation ü§ñ
            ${process.env.VALIDATE_OUTCOME === 'failure' ? '‚ùå Failed' : '‚úÖ Passed'}

            ### Plan üìñ
            ${process.env.PLAN_OUTCOME === 'failure' ? '‚ùå Failed' : process.env.PLAN_OUTCOME === 'success' ? '‚úÖ Passed' : '‚ö†Ô∏è Changes Detected'}

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${planOutput}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`infrastructure\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
        env:
          FMT_OUTCOME: ${{ steps.fmt.outcome }}
          INIT_OUTCOME: ${{ steps.init.outcome }}
          VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          PLAN_OUTCOME: ${{ steps.plan-pr.outcome }}

      - name: Select Environment
        if: github.event_name == 'workflow_dispatch'
        run: |
          ENV="${{ github.event.inputs.environment }}"
          if [ "$ENV" = "prod" ]; then
            echo "üî¥ PRODUCTION ENVIRONMENT SELECTED"
            echo "‚ö†Ô∏è  This will affect production resources!"
          else
            echo "üü¢ Development environment selected"
          fi
          echo "ENVIRONMENT=$ENV" >> $GITHUB_ENV

      - name: Terraform Plan (Manual)
        id: plan-manual
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan'
        run: |
          ENV_FILE="environments/${{ github.event.inputs.environment }}.tfvars"
          BACKEND_FILE="backends/${{ github.event.inputs.environment }}.backend.hcl"
          echo "üìã Planning infrastructure for ${{ github.event.inputs.environment }} environment..."
          terraform init -backend-config="$BACKEND_FILE" -reconfigure
          terraform plan \
            -var-file="$ENV_FILE" \
            -no-color
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Apply (Main Branch - Dev)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          terraform init -backend-config=backends/dev.backend.hcl -reconfigure
          terraform apply \
            -var-file="environments/dev.tfvars" \
            -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Apply (Manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply'
        run: |
          BACKEND_FILE="backends/${{ github.event.inputs.environment }}.backend.hcl"
          terraform init -backend-config="$BACKEND_FILE" -reconfigure
          terraform apply \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Destroy (Manual)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          BACKEND_FILE="backends/${{ github.event.inputs.environment }}.backend.hcl"
          terraform init -backend-config="$BACKEND_FILE" -reconfigure
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

      - name: Terraform Output
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: terraform output
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
