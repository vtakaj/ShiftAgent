name: Pull Request Checks

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  # Code Quality and Testing
  quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --frozen

      - name: Run tests with coverage
        run: |
          PYTHONPATH=src uv run pytest tests/ -v --cov=src/natural_shift_planner --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

      - name: Run ruff linting
        run: |
          uv run ruff check src/ --output-format=github

      - name: Run ruff formatting check
        run: |
          uv run ruff format --check src/

      - name: Run mypy type checking
        run: |
          PYTHONPATH=src uv run mypy -p natural_shift_planner --show-error-codes

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python Security Check
        run: |
          pip install bandit[toml] safety
          # Check for security issues in Python code
          bandit -r src/ -f json -o bandit-results.json || true
          # Check for known security vulnerabilities in dependencies
          safety check --json --output safety-results.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            trivy-results.sarif

  # Docker Build Test (no push)
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: test-image:pr-${{ github.event.number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Dependency Analysis (only for public repos or repos with GitHub Advanced Security)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: false  # Disabled for private repositories without GitHub Advanced Security
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  # Infrastructure Changes (if any)
  infrastructure-check:
    name: Infrastructure Plan
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.changed_files, 'infrastructure/')
    defaults:
      run:
        working-directory: ./infrastructure
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~> 1.5"

      - name: Terraform Format Check
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan (Dev)
        run: |
          terraform plan \
            -var-file="environments/dev.tfvars" \
            -no-color \
            -detailed-exitcode
        env:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

  # Comment on PR with results
  pr-comment:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: [quality, security, docker-build, dependency-review]
    if: always()
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              quality: '${{ needs.quality.result }}',
              security: '${{ needs.security.result }}',
              docker: '${{ needs.docker-build.result }}',
              dependencies: '${{ needs.dependency-review.result }}'
            };

            const getIcon = (status) => {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'cancelled': return '⏹️';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };

            // Handle dependency review status for private repos
            const dependencyStatus = results.dependencies || 'skipped';
            const dependencyNote = dependencyStatus === 'skipped' ? ' (private repo)' : '';

            const comment = `## 🔍 Pull Request Checks Summary

            | Check | Status | Result |
            |-------|--------|--------|
            | Code Quality & Tests | ${getIcon(results.quality)} | ${results.quality} |
            | Security Scan | ${getIcon(results.security)} | ${results.security} |
            | Docker Build | ${getIcon(results.docker)} | ${results.docker} |
            | Dependency Review | ${getIcon(dependencyStatus)} | ${dependencyStatus}${dependencyNote} |

            ### 📋 Next Steps
            ${results.quality === 'success' && results.security === 'success' && results.docker === 'success' ? 
              '🎉 All checks passed! This PR is ready for review.' : 
              '⚠️  Some checks failed. Please review the results above and fix any issues.'}

            *Automated by GitHub Actions*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });