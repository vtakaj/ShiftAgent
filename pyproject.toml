[project]
name = "shift-scheduler-mcp"
version = "1.0.0"
description = "Employee shift scheduling using Timefold Solver"
readme = "README.md"
license = { text = "Apache-2.0" }
requires-python = ">=3.11"
authors = [
    { name = "vtakaj", email = "vtakaj@gmail.com" }
]

dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "timefold>=1.14.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "typing-extensions>=4.8.0",
    "fastmcp>=0.1.0",
    "httpx>=0.25.0",
    "jinja2>=3.1.0",
    "azure-storage-blob>=12.19.0",
    "azure-identity>=1.15.0",
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "pandas>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.5.0",
    "commitizen>=3.29.0",
]

# Console scripts for uvx support
[project.scripts]
shift-scheduler-api = "natural_shift_planner.main:main"
shift-scheduler-mcp = "natural_shift_planner_mcp.server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# シンプルなhatchling設定
[tool.hatch.build.targets.wheel]
# ルートディレクトリのPythonファイルと src ディレクトリを含める
include = [
    "/*.py",
    "/src/**/*.py",
]

# 不要なファイルを除外
exclude = [
    ".devcontainer/",
    ".vscode/", 
    ".git/",
    "__pycache__/",
    ".pytest_cache/",
    "*.pyc",
    ".gitignore",
    "Dockerfile*",
    "docker-compose*.yml",
    "Makefile",
    "*.md",
    "*.sh",
    "api-test.http",
    "uv.lock"
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0", 
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.5.0",
    "commitizen>=3.29.0",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

# Ignore Timefold constraint system typing issues
[[tool.mypy.overrides]]
module = "natural_shift_planner.core.constraints.*"
ignore_errors = true

# Ignore complex nested data analysis typing issues
[[tool.mypy.overrides]]
module = "natural_shift_planner.api.analysis"
ignore_errors = true

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Indent with spaces
indent-style = "space"
# Unix-style line endings
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = ["E501"]  # line too long (handled by formatter)

[tool.ruff.lint.isort]
known-first-party = ["natural_shift_planner"]

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_provider = "pep621"
update_changelog_on_bump = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src/natural_shift_planner"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"