services:
  shift-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    ports:
      - "${SHIFT_SCHEDULER_PORT:-8081}:8081"
    environment:
      - PYTHONUNBUFFERED=1
      # Logging configuration (production defaults)
      - LOG_LEVEL=${LOG_LEVEL:-WARN}
      - SOLVER_LOG_LEVEL=${SOLVER_LOG_LEVEL:-WARN}
      # Java configuration (optimized for production)
      - JAVA_OPTS=${JAVA_OPTS:--Xmx2g -XX:+UseG1GC -XX:+UseStringDeduplication}
      # Job storage configuration
      - JOB_STORAGE_TYPE=${JOB_STORAGE_TYPE:-filesystem}
      - JOB_STORAGE_DIR=${JOB_STORAGE_DIR:-/app/job_storage}
      # Solver configuration (longer timeout for production)
      - SOLVER_TIMEOUT_SECONDS=${SOLVER_TIMEOUT_SECONDS:-300}
      # MCP configuration
      - SHIFT_SCHEDULER_API_URL=${SHIFT_SCHEDULER_API_URL:-http://shift-scheduler:8081}
    volumes:
      # Production: Only job storage, no source code mounts
      - job_data:/app/job_storage
      # Optional: Bind mount for persistent storage
      # - ${HOST_JOB_STORAGE_DIR:-/var/lib/shift-scheduler}:/app/job_storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - shift-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL database for production use
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-shiftdb}
      - POSTGRES_USER=${POSTGRES_USER:-shiftuser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}  # Must be set in production
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-shiftuser} -d ${POSTGRES_DB:-shiftdb}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    networks:
      - shift-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MCP Server for production AI assistant integration
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
    command: ["python", "mcp_server.py"]
    ports:
      - "${MCP_SERVER_PORT:-8082}:8082"
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=${LOG_LEVEL:-WARN}
      - SOLVER_LOG_LEVEL=${SOLVER_LOG_LEVEL:-WARN}
      - MCP_LOG_LEVEL=${MCP_LOG_LEVEL:-WARN}
      - SHIFT_SCHEDULER_API_URL=http://shift-scheduler:8081
    depends_on:
      shift-scheduler:
        condition: service_healthy
    restart: always
    networks:
      - shift-network
    profiles:
      - mcp
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      # SSL certificates (if using HTTPS)
      # - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - shift-scheduler
    restart: always
    networks:
      - shift-network
    profiles:
      - nginx
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Redis for caching (optional)
  redis:
    image: redis:alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    networks:
      - shift-network
    profiles:
      - cache
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

volumes:
  postgres_data:
    driver: local
  job_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  shift-network:
    driver: bridge
    name: shift-scheduler-network-prod

# Production secrets (use Docker secrets in swarm mode)
secrets:
  postgres_password:
    external: true
  jwt_secret:
    external: true
